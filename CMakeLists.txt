cmake_minimum_required(VERSION 3.2.3)
project(varuna)

set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/bin)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib)

set(BUILD_TESTS ON CACHE BOOL "Build unit tests")
set(COVERALLS OFF CACHE BOOL "Turn on coveralls")

set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${PROJECT_SOURCE_DIR}/scripts/coveralls-cmake/cmake")

message(STATUS "Coveralls: ${COVERALLS}")

if(COVERALLS)
    include(Coveralls)
    coveralls_turn_on_coverage()
endif()

set(CMAKE_CXX_STANDARD    14)
set(CMAKE_CXX_EXTENSIONS  OFF)

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    set(WARNINGS "/W4 /EHsc /wd4100")

    set(DEBUG_FLAGS				"/DEBUG /Zi /Od /DVARUNA_DEBUG=1")
    set(RELEASE_FLAGS			"/Ox /DVARUNA_RELEASE=1")
    set(MINSIZEREL_FLAGS		"/O1 /DVARUNA_RELEASE=1")
    set(RELWITHDEBINFO_FLAGS	"/DEBUG /Zi /Ot /DVARUNA_DEBUG=1")

    set(CMAKE_CXX_FLAGS       " ${CMAKE_CXX_FLAGS} ${WARNINGS} /MTd /bigobj")

    set(CMAKE_CXX_FLAGS_RELEASE			"${CMAKE_CXX_FLAGS} ${RELEASE_FLAGS}")
    set(CMAKE_CXX_FLAGS_DEBUG			"${CMAKE_CXX_FLAGS} ${DEBUG_FLAGS}")
    set(CMAKE_CXX_FLAGS_MINSIZEREL		"${CMAKE_CXX_FLAGS} ${MINSIZEREL_FLAGS}")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO	"${CMAKE_CXX_FLAGS} ${RELWITHDEBINFO_FLAGS}")
else()
    if (CMAKE_COMPILER_IS_GNUCXX)
        set(WARNINGS "-pedantic -Wall -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wmissing-declarations -Wmissing-include-dirs -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wshadow -Wsign-conversion -Wsign-promo -Wstrict-overflow=5 -Wno-switch-default -Wundef -Wno-unused -Wno-unused-parameter -Wno-date-time -Wno-overloaded-virtual")
    else()
        set(WARNINGS "-Weverything -Wno-c++98-compat -Wno-padded -Wno-unused -Wno-unused-parameter -Wno-weak-vtables -Wno-exit-time-destructors -Wno-global-constructors -Wno-date-time -Wno-unused-member-function -Wno-c++98-compat-pedantic")
    endif()

    include(CheckCXXCompilerFlag)

    check_cxx_compiler_flag(-Og CXX_COMPILER_SUPPORT_OG)
    if(CXX_COMPILER_SUPPORT_OG)
        set(OPT_FLAG_DEBUG "-Og")
    else()
        set(OPT_FLAG_DEBUG "-O0")
    endif()

    set(DEBUG_FLAGS				"-g ${OPT_FLAG_DEBUG} -DVARUNA_DEBUG=1")
    set(RELEASE_FLAGS			"-O3 -DVARUNA_RELEASE=1")
    set(MINSIZEREL_FLAGS		"-Os -DVARUNA_RELEASE=1")
    set(RELWITHDEBINFO_FLAGS	"-g -O2 -DVARUNA_DEBUG=1")

    check_cxx_compiler_flag(-std=c++14 CXX_COMPILER_SUPPORTS_CXX14)
    check_cxx_compiler_flag(-std=c++1y CXX_COMPILER_SUPPORTS_CXX1Y)
    if(CXX_COMPILER_SUPPORTS_CXX14)
        set(CMAKE_CXX_FLAGS   "${CMAKE_CXX_FLAGS} -std=c++14")
    elseif(CXX_COMPILER_SUPPORTS_CXX1Y)
        set(CMAKE_CXX_FLAGS   "${CMAKE_CXX_FLAGS} -std=c++1y")
    else()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++14 support. Please use a different C++ compiler.")
    endif()

    set(CMAKE_CXX_FLAGS       "${CMAKE_CXX_FLAGS} ${WARNINGS} -pthread")

    set(CMAKE_CXX_FLAGS_RELEASE			"${CMAKE_CXX_FLAGS} ${RELEASE_FLAGS}")
    set(CMAKE_CXX_FLAGS_DEBUG			"${CMAKE_CXX_FLAGS} ${DEBUG_FLAGS}")
    set(CMAKE_CXX_FLAGS_MINSIZEREL		"${CMAKE_CXX_FLAGS} ${MINSIZEREL_FLAGS}")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO	"${CMAKE_CXX_FLAGS} ${RELWITHDEBINFO_FLAGS}")
endif()

if("${CMAKE_BUILD_TYPE}" STREQUAL "")
    message(STATUS "No build configuration set, defaulting to Debug")
    set(CMAKE_BUILD_TYPE "Debug")
else()
    message(STATUS "Build configuration: ${CMAKE_BUILD_TYPE}")
endif()

if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    message(STATUS "Build flags: ${CMAKE_CXX_FLAGS_DEBUG}")
elseif("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
    message(STATUS "Build flags: ${CMAKE_CXX_FLAGS_RELEASE}")
elseif("${CMAKE_BUILD_TYPE}" STREQUAL "MinSizeRel")
    message(STATUS "Build flags: ${CMAKE_CXX_FLAGS_MINSIZEREL}")
elseif("${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo")
    message(STATUS "Build flags: ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
else()
    message(STATUS "Unsupported build configuration: '${CMAKE_BUILD_TYPE}', defaulting to Debug")
    set(CMAKE_BUILD_TYPE "Debug")
    message(STATUS "Build flags: ${CMAKE_CXX_FLAGS_DEBUG}")
endif()

find_package(LLVM REQUIRED CONFIG)
message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
message(STATUS "LLVM include directory: ${LLVM_INCLUDE_DIRS}")

include_directories(${PROJECT_SOURCE_DIR})
include_directories(src)
include_directories(third-party/include)
include_directories(SYSTEM third-party/cereal/include)
include_directories(SYSTEM third-party/ctpl)
include_directories(SYSTEM third-party/doctest)
include_directories(SYSTEM third-party/spdlog/include)
include_directories(SYSTEM third-party/utf8/source)
include_directories(SYSTEM ${LLVM_INCLUDE_DIRS})

add_definitions(${LLVM_DEFINITIONS})

add_subdirectory(third-party)
add_subdirectory(src)
add_subdirectory(projects)

file(GLOB main_sources src/Main.cpp)

add_executable(varuna ${main_sources})
target_link_libraries(varuna src)

install(TARGETS varuna DESTINATION bin)

if(BUILD_TESTS)
    enable_testing()
    add_subdirectory(src/tests)
endif()
